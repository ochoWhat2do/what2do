name: develop CI check

on:
  push:
    branches: [ "dev" ]
env:
  DOCKER_IMAGE: g

permissions:
  checks: write

jobs:
  CD:
    runs-on: ubuntu-22.04
    steps:

      - name: 레포지토리 체크아웃
        uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: MySQL 설치
        uses: samin/mysql-action@v1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3307 # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: whatdb # Optional, default value is "whatdb". The specified database which will be create
          mysql user: admin # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Of course you can use secrets, too
          mysql password: ${{ secrets.DB_PASSWORD }}

      - name: yml 파일 생성
        run: |
          cd ./src/main/resources
          rm -rf ./application.properties
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
          touch ./application-aws.yml
          echo "${{ secrets.APPLICATION_AWS_YML }}" > ./application-aws.yml
          touch ./application-key.yml
          echo "${{ secrets.APPLICATION_KEY_YML }}" > ./application-key.yml
          touch ./application-oauth.yml
          echo "${{ secrets.APPLICATION_OAUTH_YML }}" > ./application-oauth.yml
          touch ./application-template.yml
          echo "${{ secrets.APPLICATION_TEMPLATE_YML }}" > ./application-template.yml
        shell: bash

      # gradle 실행 허가
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: 어플리케이션 실행 테스트(테스트 코드X)
        run: ./gradlew clean build --exclude-task test

      - name: 변경된 application.properties 파일 생성
        run: |
          sed -i 's/spring.profiles.active=local/spring.profiles.active=dev/' ./src/main/resources/application.properties
      # 개발서버용 Docker 빌드 생성 및 푸시
      - name: dev Docker build & push
        if: contains(github.ref, 'dev')
        run: |
          docker login -u  ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/what2do-dev .
          docker push $${{ secrets.DOCKER_REPO }}/what2do-dev

      # 개발서버 SSH접속 및 배포
      - name: Deploy to Dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: (contains(github.ref, 'dev')
        with:
          key: ${{ secrets.BACKEND_SSH_PRI_KEY }}
          host: ${{ secrets.AWS_BACKEND_HOST }}
          username: ${{ secrets.AWS_BACKEND_USER }}
          script: |
            sudo docker login -u $${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker rm -f $(docker ps -q -a)
            sudo docker pull ${{ secrets.DOCKER_REPO}}/what2do-dev
            docker-compose up -d
            docker image prune -f